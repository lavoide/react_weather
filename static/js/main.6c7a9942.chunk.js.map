{"version":3,"sources":["action-creators/FetchData.js","containers/input.js","components/chart.js","containers/weather_list.js","containers/editButtons.js","containers/current_list.js","components/app.js","reducers/FetchReducer.js","reducers/index.js","index.js"],"names":["fetchData","url","a","axios","get","response","data","fetchAPIResponse","city","dispatch","URL","then","target","list","weather","icon","type","payload","catch","e","alert","console","log","deleteWeather","InputText","state","value","_changeHandler","setState","_fetch","event","preventDefault","props","FetchAPIResponse","className","onSubmit","this","placeholder","onChange","React","Component","connect","bindActionCreators","height","width","color","_","round","sum","length","units","WeatherList","location","pathname","slice","cityData","filter","el","name","temps","map","main","temp","pressures","pressure","humidities","humidity","key","feels_like","to","fetchConfig","conditions","EditButtons","delete","bind","window","confirm","onClick","edit","title","names","CurrentList","id","src","alt","withRouter","App","exact","path","component","initialState","fetchReducer","action","indexOf","includes","splice","id2","rootReducer","combineReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","localStorage","getItem","JSON","parse","reHydrateStore","applyMiddleware","getState","next","result","setItem","stringify","thunk","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.6c7a9942.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst API_KEY = '1330c144ec87772649f4c873a0985196';\r\nconst URL = (city) => `https://api.openweathermap.org/data/2.5/forecast?q=${city}&units=metric&APPID=${API_KEY}`\r\n\r\nexport const WEATHER = 'GET_WEATHER_DATA';\r\nexport const DELETE = 'DELETE_WEATHER_DATA';\r\n\r\nconst fetchData = async url => {\r\n    try {\r\n        const response = await axios.get(url);\r\n        return response.data;\r\n    } catch (e) {\r\n        throw e;\r\n    }\r\n}\r\n\r\nexport const fetchAPIResponse = (city) => {\r\n    return dispatch => {\r\n        fetchData(URL(city)).then(response => {\r\n            let target = response.list[0].weather[0];\r\n            let icon = `${target.icon}.png`;\r\n            target.icon = icon;\r\n            dispatch({ type: WEATHER, payload: response });\r\n        })\r\n            .catch(e => { alert('Please check the input.'); console.log(`External error: ${e}`); });\r\n    }\r\n};\r\n\r\nexport const deleteWeather = (city) =>{\r\n    return { type: DELETE, payload: city }\r\n}\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport { fetchAPIResponse } from '../action-creators/FetchData';\r\n\r\nclass InputText extends React.Component {\r\n\r\n  state = {\r\n    value: null\r\n  }\r\n\r\n  _changeHandler = e => {\r\n    this.setState({\r\n      value: e.target.value\r\n    });\r\n  }\r\n\r\n  _fetch = (event) => {\r\n    event.preventDefault();\r\n    const { value } = this.state;\r\n    if (!value) {\r\n      alert('Please fill the input.');\r\n      return;\r\n    }\r\n    this.props.FetchAPIResponse(value);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form className=\"input-group\" onSubmit={this._fetch} >\r\n        <input className=\"form-control\" placeholder=\"Enter a city...\" onChange={this._changeHandler} />\r\n        <span className=\"input-group-btn\">\r\n          <button type=\"submit\" className=\"btn btn-secondary\" >Submit</button>\r\n        </span>\r\n      </form>\r\n    )\r\n  }\r\n}\r\n\r\nconst matchDispatchToProps = dispatch => {\r\n  return bindActionCreators({ FetchAPIResponse: fetchAPIResponse }, dispatch);\r\n}\r\n\r\nexport default connect(null, matchDispatchToProps)(InputText);\r\n","import _ from 'lodash';\nimport React from 'react';\nimport { Sparklines, SparklinesLine, SparklinesReferenceLine } from 'react-sparklines';\n\nfunction average(data) {\n  return _.round(_.sum(data) / data.length);\n}\n\nexport default (props) => {\n  return (\n    <div>\n      <Sparklines height={120} width={180} data={props.data}>\n        <SparklinesLine color={props.color} />\n        <SparklinesReferenceLine type=\"avg\" />\n      </Sparklines>\n      <div>av - {average(props.data)} {props.units}</div>\n    </div>\n  );\n}\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport Chart from '../components/chart';\n\nclass WeatherList extends Component {\n\n\n  render() {\n    const url = this.props.location.pathname.slice(1);\n    let cityData1 = this.props.weather.filter(el => el.city.name === url);\n    let cityData = cityData1[0];\n    const temps = cityData && cityData.list.map(weather => weather.main.temp);\n    const pressures = cityData && cityData.list.map(weather => weather.main.pressure);\n    const humidities = cityData && cityData.list.map(weather => weather.main.humidity);\n    return (\n      <div>\n        <p>Weekly Forecast</p>\n        <table className=\"table table-hover\">\n          <thead>\n            <tr>\n              <th>City</th>\n              <th>Temperature (K)</th>\n              <th>Pressure (hPa)</th>\n              <th>Humidity (%)</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr key={cityData.city.name}>\n              <td>{cityData.city.name}</td>\n              <td><Chart data={temps.slice(0, 7)} color=\"red\" units=\"C\" /></td>\n              <td><Chart data={pressures.slice(0, 7)} color=\"green\" units=\"hPa\" /></td>\n              <td><Chart data={humidities.slice(0, 7)} color=\"blue\" units=\"%\" /></td>\n            </tr>\n          </tbody>\n        </table>\n        <ul>\n          <li> Current temperature -  {cityData.list[0].main.temp} C</li>\n          <li>Feels like {cityData.list[0].main.feels_like} C</li>\n          <li>Current humidity - {cityData.list[0].main.humidity} %</li>\n          <li>Current pressure - {cityData.list[0].main.pressure} hPa</li>\n        </ul>\n\n        <Link to='/weather'><button className=\"btn btn-secondary\">Back</button></Link>\n      </div>\n    );\n  }\n}\nconst mapStateToProps = state => {\n  return {\n    weather: state.fetchConfig.weather,\n    city: state.fetchConfig.name,\n    conditions: state.fetchConfig.conditions\n  }\n}\nexport default connect(mapStateToProps)(WeatherList);\n","import React, { Component } from 'react';\r\nimport { bindActionCreators } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport { deleteWeather } from '../action-creators/FetchData';\r\nimport { fetchAPIResponse } from '../action-creators/FetchData';\r\n\r\nclass EditButtons extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.delete = this.delete.bind(this);\r\n    }\r\n\r\n    delete() {\r\n        if (window.confirm(\"Do you really want to delete this?\"))\r\n            return this.props.deleteWeather(this.props.city);\r\n    }\r\n    refresh() {\r\n        return this.props.fetchAPIResponse(this.props.city);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"editbuttons\">\r\n                <button className=\"button\" onClick={this.edit}>Refresh</button>\r\n                <button className=\"button\" onClick={this.delete} title={\"Delete\"} >Delete</button>\r\n            </div>\r\n        )\r\n\r\n\r\n    }\r\n}\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        names: state.fetchConfig.name\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return bindActionCreators({ deleteWeather, fetchAPIResponse }, dispatch);\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(EditButtons);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport '../style.css';\r\nimport { bindActionCreators } from 'redux';\r\nimport { deleteWeather } from '../action-creators/FetchData';\r\nimport EditButtons from './editButtons';\r\nimport {\r\n    Link,\r\n    withRouter\r\n} from \"react-router-dom\";\r\n\r\nclass CurrentList extends Component {\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"weather-container\" >\r\n                {this.props.conditions.map((cityData, id) =>\r\n                    <div className=\"weather\" key={cityData.name}>\r\n                        <Link\r\n                            key={id}\r\n                            to={`/${cityData.name}`}\r\n                        >\r\n                            <h3>{cityData.name}</h3>\r\n                            <p>{cityData.main.temp}</p>\r\n                            <p>{cityData.weather[0].main}</p>\r\n                            <p><img src={`http://openweathermap.org/img/w/${cityData.weather[0].icon}`} alt=\"Missing icon\"></img></p>\r\n                        </Link>\r\n\r\n\r\n                        <EditButtons city={cityData.name} />\r\n                    </div>)}\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n        weather: state.fetchConfig.weather,\r\n        city: state.fetchConfig.name,\r\n        conditions: state.fetchConfig.conditions\r\n    }\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n    return bindActionCreators({ deleteWeather }, dispatch);\r\n}\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(CurrentList));\r\n","import React from 'react';\nimport { Component } from 'react';\nimport InputText from '../containers/input'\n\nimport WeatherList from '../containers/weather_list';\nimport CurrentList from '../containers/current_list';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect\n} from \"react-router-dom\";\n\nexport default class App extends Component {\n  render() {\n    return (\n      <Router>\n        <Switch>\n          <Route exact path=\"/\">\n            <Redirect to=\"/weather\" />\n          </Route>\n          <Route path='/weather'>\n            <div>\n              <InputText />\n              <CurrentList />\n            </div>\n          </Route>\n          <Route path='/:name' component={WeatherList}>\n          </Route>\n        </Switch>\n      </Router>\n    );\n  }\n}\n","\r\nlet initialState = {\r\n    weather: [],\r\n    conditions: [],\r\n    name: []\r\n};\r\n\r\nconst fetchReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'GET_WEATHER_DATA':\r\n            action.payload.list[0].name = action.payload.city.name;\r\n            const id = state.name.indexOf(action.payload.city.name);\r\n            if (state.name.includes(action.payload.city.name)) {\r\n                state.weather.splice(id, 1);\r\n                state.conditions.splice(id, 1);\r\n                state.name.splice(id, 1);\r\n                return {\r\n                    ...state,\r\n                    weather: [...state.weather, action.payload],\r\n                    name: [...state.name, action.payload.city.name],\r\n                    conditions: [...state.conditions, action.payload.list[0]]\r\n                }\r\n            }\r\n            else return {\r\n                ...state,\r\n                weather: [...state.weather, action.payload],\r\n                name: [...state.name, action.payload.city.name],\r\n                conditions: [...state.conditions, action.payload.list[0],]\r\n            };\r\n\r\n        case 'DELETE_WEATHER_DATA':\r\n            const id2 = state.name.indexOf(action.payload);\r\n            state.weather.splice(id2, 1);\r\n            state.conditions.splice(id2, 1);\r\n            state.name.splice(id2, 1);\r\n            return {...state, weather:[...state.weather], conditions:[...state.conditions], name: [...state.name]}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default fetchReducer;","import { combineReducers } from 'redux';\nimport fetchReducer from './FetchReducer';\n\nconst rootReducer = combineReducers({\n  fetchConfig: fetchReducer\n});\n\nexport default rootReducer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport App from './components/app';\nimport reducers from './reducers';\nimport thunk from 'redux-thunk';\n\nconst localStorageMiddleware = ({getState}) => {\n    return (next) => (action) => {\n        const result = next(action);\n        localStorage.setItem('applicationState', JSON.stringify(\n            getState()\n        ));\n        return result;\n    };\n};\nconst reHydrateStore = () => { \n    if (localStorage.getItem('applicationState') !== null) {\n        return JSON.parse(localStorage.getItem('applicationState')) \n    }\n}\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(\n    reducers,\n\treHydrateStore(),\n\tcomposeEnhancers(applyMiddleware(\n\t\tlocalStorageMiddleware,thunk\n    ))\n)\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n   document.querySelector('.container'));\n\n"],"sourceRoot":""}